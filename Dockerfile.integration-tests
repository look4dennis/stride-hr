FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-backend

# Install Node.js for frontend testing
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Set working directory
WORKDIR /app

# Copy backend source
COPY backend/ ./backend/
COPY frontend/ ./frontend/

# Restore backend dependencies
WORKDIR /app/backend
RUN dotnet restore

# Build backend
RUN dotnet build --no-restore -c Release

# Install frontend dependencies
WORKDIR /app/frontend
RUN npm ci

# Build frontend for testing
RUN npm run build

# Create final test image
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS final

# Install Node.js, curl, and other testing tools
RUN apt-get update && apt-get install -y \
    nodejs \
    npm \
    curl \
    wget \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Install global testing tools
RUN npm install -g newman @angular/cli

# Set working directory
WORKDIR /app

# Copy built applications
COPY --from=build-backend /app/backend ./backend
COPY --from=build-backend /app/frontend ./frontend

# Copy test scripts
COPY scripts/ ./scripts/
COPY test-scripts/ ./test-scripts/

# Create test results directory
RUN mkdir -p /app/test-results

# Copy integration test configuration
COPY docker-compose.integration.yml ./
COPY .env.integration ./.env

# Make scripts executable
RUN chmod +x ./scripts/*.ps1
RUN chmod +x ./test-scripts/*.sh

# Set environment variables
ENV DOTNET_ENVIRONMENT=Testing
ENV NODE_ENV=test
ENV API_BASE_URL=http://localhost:8080
ENV FRONTEND_BASE_URL=http://localhost:80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command runs integration tests
CMD ["pwsh", "./scripts/system-integration-test.ps1"]