trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  branches:
    include:
    - main

variables:
  buildConfiguration: 'Release'
  vmImageName: 'ubuntu-latest'
  containerRegistry: 'strideHRRegistry'
  imageRepository: 'stridehr'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Test
  displayName: 'Test Stage'
  jobs:
  - job: BackendTests
    displayName: 'Backend Tests'
    pool:
      vmImage: $(vmImageName)
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: StrideHR_Test
          MYSQL_USER: stridehr
          MYSQL_PASSWORD: stridehr123
        ports:
          3306: 3306

      redis:
        image: redis:7-alpine
        ports:
          6379: 6379

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: 'backend/**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: 'backend/**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: 'backend/tests/**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'
      env:
        ConnectionStrings__DefaultConnection: 'Server=localhost;Database=StrideHR_Test;User=stridehr;Password=stridehr123;Port=3306;'
        Redis__ConnectionString: 'localhost:6379'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

  - job: FrontendTests
    displayName: 'Frontend Tests'
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      displayName: 'Use Node.js 18'
      inputs:
        versionSpec: '18.x'

    - script: |
        cd frontend
        npm ci
      displayName: 'Install dependencies'

    - script: |
        cd frontend
        npm run lint
      displayName: 'Lint'

    - script: |
        cd frontend
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      displayName: 'Run tests'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'frontend/coverage/cobertura-coverage.xml'

- stage: Build
  displayName: 'Build Stage'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: BuildImages
    displayName: 'Build Docker Images'
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: Docker@2
      displayName: 'Build backend image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)-backend'
        command: 'buildAndPush'
        Dockerfile: 'backend/Dockerfile.prod'
        buildContext: 'backend'
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: 'Build frontend image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)-frontend'
        command: 'buildAndPush'
        Dockerfile: 'frontend/Dockerfile.prod'
        buildContext: 'frontend'
        tags: |
          $(tag)
          latest

- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployToStaging
    displayName: 'Deploy to Staging Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(stagingWebAppName)'
              containers: |
                $(containerRegistry)/$(imageRepository)-backend:$(tag)
                $(containerRegistry)/$(imageRepository)-frontend:$(tag)

- stage: DeployProduction
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(productionWebAppName)'
              containers: |
                $(containerRegistry)/$(imageRepository)-backend:$(tag)
                $(containerRegistry)/$(imageRepository)-frontend:$(tag)